"""Minimal SMTP client used by the standalone HITL toolkit."""

from __future__ import annotations

import os
import smtplib
from email.message import EmailMessage
from typing import Optional

from .logging_setup import get_logger


log = get_logger("hitl.smtp", "smtp.log")


def _env(name: str, default: str = "") -> str:
    return os.getenv(name, default)


class SmtpClient:
    """Send plain-text emails via SMTP with optional STARTTLS."""

    def __init__(
        self,
        *,
        host: Optional[str] = None,
        port: Optional[int] = None,
        username: Optional[str] = None,
        password: Optional[str] = None,
        sender: Optional[str] = None,
        use_tls: Optional[bool] = None,
        timeout: float = 30.0,
    ) -> None:
        self.host = host or _env("SMTP_HOST", "localhost")
        self.port = int(port or _env("SMTP_PORT", "587"))
        self.username = username or _env("SMTP_USERNAME") or _env("SMTP_USER")
        self.password = password or _env("SMTP_PASSWORD") or _env("SMTP_PASS")
        self.sender = sender or _env("SMTP_SENDER") or _env("SMTP_FROM") or self.username
        secure_value = _env("SMTP_SECURE", "true") if use_tls is None else use_tls
        self.use_tls = self._as_bool(secure_value)
        self.timeout = timeout

    @staticmethod
    def _as_bool(value: object) -> bool:
        if isinstance(value, bool):
            return value
        if isinstance(value, str):
            lowered = value.strip().lower()
            if lowered in {"1", "true", "yes", "on"}:
                return True
            if lowered in {"0", "false", "no", "off"}:
                return False
        return bool(value)

    def send(
        self,
        *,
        to: str,
        subject: str,
        body: str,
        in_reply_to: Optional[str] = None,
        headers: Optional[dict[str, str]] = None,
    ) -> str:
        """Send an email and return the Message-ID generated by the server."""

        if not to:
            raise ValueError("recipient address required")

        message = EmailMessage()
        message["From"] = self.sender or self.username or "no-reply@example.com"
        message["To"] = to
        message["Subject"] = subject
        if in_reply_to:
            message["In-Reply-To"] = in_reply_to
        if headers:
            for key, value in headers.items():
                message[key] = value
        message.set_content(body)

        with smtplib.SMTP(self.host, self.port, timeout=self.timeout) as client:
            if self.use_tls:
                client.starttls()
            if self.username:
                client.login(self.username, self.password or "")
            client.send_message(message)

        message_id = message.get("Message-ID") or "generated-message-id"
        log.info("smtp_sent", extra={"to": to, "mid": message_id})
        return message_id